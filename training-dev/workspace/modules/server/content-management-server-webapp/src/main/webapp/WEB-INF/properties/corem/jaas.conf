/** Login configuration for the CAP server
 * The two login modules hox.corem.server.CapLoginModule and hox.corem.login.LdapLoginModule may contain the
 * attribute pairs predicate.<n>.class and predicate.<n>.args, where <n> is an integer index, which is used to set
 * the evaluation order of the predicates. The value of the class attribute specifies a
 * login predicate class name. The following classes can be used:
 *
 * hox.corem.login.NameLoginPredicate:      allow a user to login based on his name and the names of his groups.
 * hox.corem.login.AttributeLoginPredicate: allow a user to login based on his attributes and the attributes of his groups.
 * hox.corem.login.JndiNameLoginPredicate:  allow a user to login based on his jndi name and the jndi names of his groups.
 * hox.corem.login.TrueLoginPredicate:      always allow a user to login.
 *
 * The value of the args attribute specifies the class arguments. The first three classes listed above can have the
 * following name/value pairs:
 *
 * negative: either 'true' or 'false' (default), if the Boolean value returned by the predicate is not null, then it is
             reversed.
 * depth:    an integer value, specifying the depth of recursion (defaults to 0). '-1' means the recursion is unrestricted.
 *           E.g. with class hox.corem.login.NameLoginPredicate and depth=0 only the name of the user is used. With depth=1
 *           the name of the user and the names of his direct groups are used.
 * <service>.regex: a java.util.regex.Pattern regular expression value where <service> specifies a service name the pattern
                    is mapped to. <service> must be one of "debug", "dotnetappbridge", "editor", "feeder", "filesystem",
                    "importer", "publisher", "replicator", "system", "webserver", "workflow".
 * regex:    a java.util.regex.Pattern regular expression value which is mapped to all services.
 *
 * The class hox.corem.login.TrueLoginPredicate has an empty args value. Empty values are configured with a space
 * character, because JAAS complaints, if the space is missing.
 *
 * Evaluation order:
 * If no predicate is specified, then a user may always login. If predicates are specified, then they are evaluated in
 * the order of the <n> integer indices and
 *   - if a predicate returns false, then the user fails to login
 *   - if a predicate returns true, then the user may login, if the following predicates don't fail.
 *   - if a predicate returns null, then the result depends on the result of the other predicates.
 *
 * If all predicates return null, then the user fails to login.
 **/

JaasCap {

   hox.corem.server.CapLoginModule sufficient

     /* System builtin users are not allowed to use the editor and filesystem services */
     predicate.1.class="hox.corem.login.NameLoginPredicate"
     predicate.1.args="negative=true,editor.regex=(serverdump|publisher|auto-actor|watchdog|workflow|webserver|importer|feeder),filesystem.regex=(serverdump|publisher|auto-actor|watchdog|workflow|webserver|importer|feeder)"

     /* only specific system user is allowed for the respective service */
     predicate.2.class="hox.corem.login.NameLoginPredicate"
     predicate.2.args="webserver.regex=webserver,publisher.regex=publisher,replicator.regex=replicator,workflow.regex=workflow,feeder.regex=feeder"

     /* if not forbidden by other rules, other services are accessible for all users */
     predicate.3.class="hox.corem.login.NameLoginPredicate"
     predicate.3.args="editor.regex=.*,debug.regex=.*,filesystem.regex=.*,importer.regex=.*,system.regex=.*,dotnetappbridge.regex=.*"

   ;
};
