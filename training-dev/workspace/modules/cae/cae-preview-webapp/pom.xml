<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.coremedia.training.coredining</groupId>
    <artifactId>cae</artifactId>
    <version>7.1-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>cae-preview-webapp</artifactId>
  <packaging>war</packaging>

  <description>CAE webapp for to be used in a content management environment for preview purposes.</description>

  <properties>
    <finalName>coredining</finalName>
    <!-- always true if preview webapp is started with local tomcat plugin -->
    <cae.use.local.resources>true</cae.use.local.resources>
    <cae.developer.mode>true</cae.developer.mode>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>cae-base-component</artifactId>
      <version>${project.version}</version>
      <type>jar</type>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>preview-cae-extension-dependencies</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
      <scope>runtime</scope>
    </dependency>

    <!-- === TRAINING ONLY === -->

    <!--COREMEDIA DEPENDENCIES-->
    <!--
     | SCOPE RUNTIME IS USED FOR THOSE DEPENDENCIES, THAT ARE REFERENCED IN SPRING CONTEXT FILES
     | REMOVE RUNTIME SCOPES TO NEEDED DEPENDENCIES ON COMPILE ERRORS
     -->
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-contentbeanservices-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cap-unified-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>coremedia-xml</artifactId>
    </dependency>
    <!-- runtime dependencies -->
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-viewservices-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-handlerservices-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-linkservices-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-util</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!--RUNTIME SCOPE
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-viewservices-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cae-linkservices-impl</artifactId>
      <scope>runtime</scope>
    </dependency>
    -->
    <!--
     | The pbe taglib is deactivated by default. This dependency only adds the ability to use the taglib.
     | When enabled, the taglib will render the studio specific pbe integration.
     -->
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>cap-editing-pbe-taglib-component</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>coremedia-cache</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.coremedia.cms</groupId>
      <artifactId>bean-generator</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>database-drivers</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
      <scope>runtime</scope>
    </dependency>

    <!--THIRDPARTY DEPENDENCIES-->

    <dependency>
      <groupId>com.lowagie</groupId>
      <artifactId>itext</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>javax.servlet.jsp-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!--TEST SCOPE-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- === END OF TRAINING ONLY -->
  </dependencies>

  <build>
    <finalName>${finalName}</finalName>
    <plugins>
      <!--
         invoke "mvn tomcat7:run" for running this webapp locally using a tomcat
      -->
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <configuration>
          <path>/${project.build.finalName}</path>
          <port>${STUDIO_PORT_PREFIX}${PREVIEW_CAE_PROXY_HTTP_PORT_SUFFIX}</port>
          <warSourceDirectory>${project.basedir}/src/main/webapp</warSourceDirectory>
          <contextFile>${project.basedir}/src/main/servletengine/tomcat-context.xml</contextFile>
          <systemProperties>
            <coremedia.application.repository.url>http://${cms.host}:${CMS_PORT_PREFIX}${HTTP_PORT_SUFFIX}/coremedia/ior</coremedia.application.repository.url>
            <coremedia.application.solr.search.url>http://${solr.host}:${SOLR_MASTER_PORT_PREFIX}${HTTP_PORT_SUFFIX}/solr/preview</coremedia.application.solr.search.url>
            <coremedia.application.elastic.solr.url>http://${solr.host}:${SOLR_MASTER_PORT_PREFIX}${HTTP_PORT_SUFFIX}/solr</coremedia.application.elastic.solr.url>
            <!--
               Sets a JMX remote url so that the webapp can be accessed via JMX when running with tomcat plugin.
               When running this application in a standalone tomcat, then the tomcat's built-in remote connector server
               can be used instead.
            -->
            <coremedia.application.management.server.remote.url>service:jmx:rmi:///jndi/rmi://localhost:1098/cae-preview</coremedia.application.management.server.remote.url>
            <!--
               Storing logs below target so that they will be cleaned on "mvn clean", too
            -->
            <coremedia.logging.directory>${project.build.directory}/logs</coremedia.logging.directory>

            <coremedia.application.cae.use.local.resources>${cae.use.local.resources}</coremedia.application.cae.use.local.resources>
            <coremedia.application.cae.developer.mode>${cae.developer.mode}</coremedia.application.cae.developer.mode>
            <coremedia.application.view.debug.enabled>${view.debug.enabled}</coremedia.application.view.debug.enabled>
          </systemProperties>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>websphere</id>
      <!-- workaround Websphere's unperformant resource loading -->
      <build>
        <plugins>
          <plugin>
            <groupId>net.jangaroo</groupId>
            <artifactId>webjars-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>unpack</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
